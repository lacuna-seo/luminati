// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	stash "github.com/lacuna-seo/stash"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx
func (_m *Cache) Clear(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Cache) Delete(ctx context.Context, key interface{}) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key, v
func (_m *Cache) Get(ctx context.Context, key interface{}, v interface{}) error {
	ret := _m.Called(ctx, key, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) error); ok {
		r0 = rf(ctx, key, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Invalidate provides a mock function with given fields: ctx, options
func (_m *Cache) Invalidate(ctx context.Context, options stash.InvalidateOptions) error {
	ret := _m.Called(ctx, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, stash.InvalidateOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, options
func (_m *Cache) Set(ctx context.Context, key interface{}, value interface{}, options stash.Options) error {
	ret := _m.Called(ctx, key, value, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, stash.Options) error); ok {
		r0 = rf(ctx, key, value, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
